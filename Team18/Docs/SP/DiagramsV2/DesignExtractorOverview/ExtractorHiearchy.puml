@startuml

title DesignExtractor Overview

package DesignExtractor <<Rectangle>> {
    Class DesignExtractor {
        -shared_ptr<EntityExtractor> entityExtractor;
        -shared_ptr<ModifiesAbstractionExtractor> modifiesExtractor;
        -shared_ptr<UsesAbstractionExtractor> usesExtractor;
        -shared_ptr<ParentsAbstractionExtractor> parentsExtractor;
        -shared_ptr<FollowsAbstractionExtractor> followsExtractor;
        +void extractEntities(shared_ptr<ASTNode> astNode)
        +void extractAbstractions(shared_ptr<ASTNode> astNode)
        +void insertEntities()
        +void insertAbstractions()
    }

    Abstract Exractor <<Base>> {
        +virtual void extractDesigns(shared_ptr<ASTNode> astNode)
        +virtual void handleProgram(std::shared_ptr<ProgramNode> programNode)
        +virtual void handleProcedure(std::shared_ptr<ProcedureNode> procedureNode)
        +virtual void handleStatement(std::shared_ptr<StatementNode> statementNode)
        +virtual void handleRead(std::shared_ptr<ReadNode> readNode)
        +virtual void handlePrint(std::shared_ptr<PrintNode> printNode)
        +virtual void handleAssign(std::shared_ptr<AssignNode> assignNode)
        +virtual void handleCall(std::shared_ptr<CallNode> callNode)
        +virtual void handleWhile(std::shared_ptr<WhileNode> whileNode)
        +virtual void handleIf(std::shared_ptr<IfNode> ifNode)
    }
    Class EntityExtractor {
        -shared_ptr<ProcedureEntity> procedureEntity
        -shared_ptr<StatementEntity> statementEntity
        -shared_ptr<VariableEntity> variableEntity
        -shared_ptr<ConstantEntity> constantEntity
    }
    Abstract ParentsFollowsAbstractionExtractor {
        -std::shared_ptr<map<string, vector<string>>> AbstractionStorageMap
        +void extractDesigns(shared_ptr<ASTNode> astNode) override
        +virtual void handleNode(...) = 0
    }
    Class ParentsAbstractionExtractor {
        +void handleNode(...) override
    } 
    Class FollowsAbstractionExtractor {
        +void handleNode(...) override
    }
    Class UsesModifiesAbstractionExtractor {
        -std::shared_ptr<map<string, vector<string>>> AbstractionStorageMap
        -std::shared_ptr<map<string, vector<string>>> procedureStatementStorageMap
        +void handleProcedure(std::shared_ptr<ProcedureNode> procedureNode) override
        +void handleWhile(std::shared_ptr<WhileNode> whileNode) override
        +void handleIf(std::shared_ptr<IfNode> ifNode) override
    }
    Class UsesAbstractionExtractor {
        +void handleRead(std::shared_ptr<ReadNode> readNode) override
        +void handleAssign(std::shared_ptr<AssignNode> assignNode) override
    }
    Class ModifiesAbstractionExtractor {
        +void handlePrint(std::shared_ptr<PrintNode> printNode) override
        +void handleAssign(std::shared_ptr<AssignNode> assignNode) override
    }
    Class Entity {
        +shared_ptr<StringMap> getMap()
        +virtual void extractEntity(shared_ptr<ASTNode> astNode) = 0;
    }
    Class ProcedureEntity {
        +void extractEntity(shared_ptr<ASTNode> astNode)
    }
    Class StatementEntity{
        +void extractEntity(shared_ptr<ASTNode> astNode)
    }
    Class VariableEntity{
        +void extractEntity(shared_ptr<ASTNode> astNode)
    }
    Class ConstantEntity{
        +void extractEntity(shared_ptr<ASTNode> astNode)
    }

    DesignExtractor ..> Exractor
    Exractor <|-- EntityExtractor
    Exractor <|-right- ParentsFollowsAbstractionExtractor
    Exractor <|-right- UsesModifiesAbstractionExtractor
    ParentsFollowsAbstractionExtractor <|-- ParentsAbstractionExtractor
    ParentsFollowsAbstractionExtractor <|-- FollowsAbstractionExtractor
    UsesModifiesAbstractionExtractor <|-- UsesAbstractionExtractor
    UsesModifiesAbstractionExtractor <|-- ModifiesAbstractionExtractor
    EntityExtractor ..> Entity
    Entity <|-- ProcedureEntity
    Entity <|-- StatementEntity
    Entity <|-- VariableEntity
    Entity <|-- ConstantEntity


    
    
}
@enduml