@startuml
' !include ../style.puml
skinparam ClassFontColor #000000
skinparam ClassBorderColor #000000

title PKB Class Diagram

package PKB <<Rectangle>> {

    Class PKB {
        -StorageManager storageManager
        +Insertor insertor
        +Responder responder
    }

    Class StorageManager {
        -{static} sp<StatementStorage> statement_entities;
        -{static} sp<ProcedureStorage> procedure_entities;
        -{static} sp<VariableStorage> variable_entities;
        -{static} sp<ConstantStorage> constant_entities;
        -{static} sp<CallProcnameStorage> call_procname_entities;
        -{static} sp<ReadVarnameStorage> read_varname_entities;
        -{static} sp<PrintVarnameStorage> print_varname_entities;
        -{static} sp<ProcLinesStorage> proc_lines_entities;
        -{static} sp<PatternStorage> pattern_entities;
        -{static} sp<UsesAbstractionStorage> uses_abstractions;
        -{static} sp<ModifiesAbstractionStorage> modifies_abstractions;
        -{static} sp<FollowsAbstractionStorage> follows_abstractions;
        -{static} sp<FollowsStarAbstractionStorage> follows_star_abstractions
        -{static} sp<ParentAbstractionStorage> parent_abstractions
        -{static} sp<ParentStarAbstractionStorage> parent_star_abstractions
        -{static} sp<CallsAbstractionStorage> calls_abstractions
        -{static} sp<CallsStarAbstractionStorage> calls_star_abstractions
        -{static} sp<NextAbstractionStorage> next_abstractions
        -{static} map<ABSTRACTION, sp<AbstractionStorage>>abstraction_storage_map
        -{static} map<ENTITY, sp<NonStatementStorage>> non_statement_entity_storage_map
        -{static} map<ENTITY, sp<NameStorage>> entity_name_storage_map
        
        +{static} sp<AbstractionStorage> getAbstractionStorage(const ABSTRACTION abstraction_type)
        +{static} sp<NameStorage> getEntityNameStorage(const ENTITY entity_type)
        +{static} sp<NonStatementStorage> getEntityNonStmtStorage(const ENTITY entity_type)
        +{static} sp<StatementStorage> getStatementStorage()
        +{static} sp<ProcLinesStorage> getProcLinesStorage()
        +{static} sp<PatternStorage> getPatternStorage()
    }

    Class Insertor {
        +void addEntity(sp<StringMap> entity_map, ENTITY entity_type = STMT)
        +void addEntityNames(sp<StringMap> entity_name_map, ENTITY entity_type)
        +void addProcLines(sp<map<string, pair<string, string>>> proclines_map)
        +void addPatterns(sp<map<string, sp<Node>>> pattern_map)
        +void addAbstraction(sp<StringMap> abstraction_map, ABSTRACTION abstraction_type)
    }

    Class Responder {
        +unordered_set<string> getEntityStatement(ENTITY entity)
        +unordered_set<string> getNonStatementEntityList(ENTITY entity)
        +StringMap getNonStatementEntityMap(ENTITY entity)
        +pair<string, string> getProcLines(string procedure)
        +StringMap getNameMap(ENTITY entity_type)
        +map<string, sp<Node>> getAllPatterns()
        +sp<Node> getPattern(string statement_number)
        +StringMap getAbstraction(ABSTRACTION abstraction, bool inverse = false)
        +unordered_set<string> getAbstractionVariable(ABSTRACTION abstraction, string key)
    }

    Class EntityStorage {}

    Class AbstractionStorage {}

}

'QueryParser .down.> QueryObject
'QueryObject .left.> DataAccessLayer

' inheritance line: ClauseArg --|> QueryObject 
' dependency line: ClauseArg ..> SynonymObject

PKB ..> Insertor
PKB ..> StorageManager
PKB ..> Responder

Insertor .[hidden]right.> StorageManager
StorageManager .[hidden]right.> Responder

StorageManager ..> EntityStorage
StorageManager ..> AbstractionStorage

' EntityStorage .[hidden]down.> AbstractionStorage

@end
