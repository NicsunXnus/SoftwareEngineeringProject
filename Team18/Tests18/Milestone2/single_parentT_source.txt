procedure NUS {student = 1;
    professor = student / 3 % 2;
    print classes;
    read module;
    module = student * professor;
    while ((classes > module) || (student % professor == 0)) {
        professor = professor + 1;
        if (professor > professor + student) then {
            classes = module * 2 + 3;
            student = (1 + ((((((2))))))) * 3 / (((4))) % (5 + ((6)));
            module = 1 + 2 * 3 / 4 % 5 + 6;
            while ((1 > 2) && (!(2 != 3))) {
                while (2 < 3) {
                    while (professor < module) {
                        while (module > professor) {
                            call exception;}}}
                if (2 > 3) then {
                    print professor;
                    print module;
                } else {call classes;}}
        } else {module = 1 + 2 * 3 / 4 % 5;}}
    if (student > professor) then {
        professor = classes - module;
    } else { read exception;
        read exception;
        call exception;
        print classes;}}
procedure exception {call error;
    call classes;
    read classes;
    while (classes > professor) {
        if (classes - module < 0 + 2) then {
            call classes;
            read professor;
            if (true > 0) then {
                if (true < 0) then {
                    if (false > 0) then {
                        if (false < 0) then {
                            true = false;
                        } else {false = true;}
                    } else {false = true;}
                } else {false = true;}
            } else {true = false;}
        } else {read professor;}}}
procedure classes {call error;}
procedure error {while (true == false) {
        read error;
        print error;}}