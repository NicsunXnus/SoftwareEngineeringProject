@startuml
' !include ../style.puml
skinparam ClassFontColor #000000
skinparam ClassBorderColor #000000

title QPS Class Diagram High level

' package QueryProcessingSubsystem <<Rectangle>> {
    
' }
' Class Tokens {
        
' }
package QPS <<Rectangle>> {
    'Tokenizes the query'
    ' Class Tokenizer {
    '     vector<Tokens> tokens
    ' }
    'Represents the different types of tokens'
    
    Class QueryDriver {
        -String Query
    }

    Class PQLTokenizer {
        vector<string> tokenize(string_view pql)
    }

    Class QueryResultsTable {
        +shared_ptr<QueryResultsTable> crossProduct(shared_ptr<QueryResultsTable> other) 
        +shared_ptr<QueryResultsTable> innerJoin(shared_ptr<QueryResultsTable> other)
        +static shared_ptr<QueryResultsTable> createTable(string header, vector<string> columnValues)
        +static shared_ptr<QueryResultsTable> createTable(vector<string> headers, map<string, vector<string>> columnValues)
        +static shared_ptr<QueryResultsTable> createTable(vector<string> headers, vector<vector<string>> columnValues)
        +void deleteColumn(string deleteHeader)
        +void renameColumn(string newName, string oldName)
        +shared_ptr<QueryResultsTable> filter(string key, vector<string> targets)
    }


    'Converts the Tokens into Query Object'
    Class QueryParser {
        -unordered_map<string_view, shared_ptr<QueryObject>> synonyms
        -unordered_map <string_view, ENTITY> synonymToEntity
        -unordered_set<string_view> relationalReferences

        +tuple<vector<string_view>, vector<string_view>> splitDeclarationQuery(vector<string_view> tokens)
        +vector<shared_ptr<QueryObject>> validateDeclaration(vector<string_view> declarations)
        +vector<shared_ptr<QueryObject>> validateQuery(vector<string_view> query)
        +unordered_map<string_view, shared_ptr<QueryObject>> getSynonyms()
        
        -shared_ptr<QueryObject> createClauseObj(std::vector<string_view>& query, int& index)
        -shared_ptr<QueryObject> createPatternObject(std::vector<string_view>& query, int& index, int tokenCount)
        
    }

    'AST representation of tokens'
    ' Class AST'

    'Holds the info needed to request the PKB'
    Class QueryObject {
        -string_view data
        -shared_ptr<QueryResultsTable> table
        +string_view getQueryObjectName() 
        +virtual shared_ptr<QueryResultsTable> callAndProcess(shared_ptr<DataAccessLayer> dataAccessLayer, unordered_map<string_view, shared_ptr<QueryObject>> synonyms)

    }

    Class ClauseArg {
        -arg
        -synonym
        -isPartialMatch
        -isNum
        +getArg()
        +shared_ptr<SynonymObject> getSynonym()
    }

    Class SynonymObject {
        -string_view synonymName;
	    -ENTITY designEntity;'
        +string_view getSynonymName()
        +ENTITY getEntityType()
    }
    
    'builds the query based on Query Object (which API calls to make to PKB)'
    Class QueryBuilder {
        -vector <shared_ptr<QueryObject>> queryObjects
        -unordered_map<string_view, shared_ptr<QueryObject>> synonyms
        -shared_ptr<DataAccessLayer> dataAccessLayer

        +vector<shared_ptr<QueryResultsTable>> buildQuery()
    }
    'Handles return values from PKB'
    Class ResultsHandler {
        +list<string> processTables(vector<shared_ptr<QueryResultsTable>> tables)
    }

    'Talks to PKB'
    Class DataAccessLayer {
        
        +vector<string> getEntity(ENTITY type)
        +vector<string> getAllProcedures()
        +vector<string> getAllVariables()
        +vector<string> getAllConstants()
        +map<string, vector<string>> DataAccessLayer::getClause(ABSTRACTION abstraction)

    }

    

}



QueryParser .down.> QueryObject
QueryObject .left.> DataAccessLayer
QueryBuilder .right.> QueryObject
QueryDriver ..> QueryParser
ClauseArg ..> SynonymObject
ClauseArg --|> QueryObject
ResultsHandler ..> QueryResultsTable
QueryBuilder ..> QueryResultsTable
QueryObject ..> QueryResultsTable
' QueryProcessingSubsystem -down-> QPS
' Clauses -up-|> QueryEvaluator

@end
